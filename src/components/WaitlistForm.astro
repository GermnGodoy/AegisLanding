---
// Server-side component for the waitlist form
---

<form id="waitlist-form" class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto lg:mx-0">
  <div class="flex-1">
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Enter your email"
      required
      class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-amber-400 focus:border-transparent text-black placeholder-gray-500"
    />
    <div id="email-error" class="text-red-400 text-sm mt-1 hidden"></div>
  </div>
  <button
    type="submit"
    id="submit-btn"
    class="px-8 py-3 bg-amber-400 text-black font-bold rounded-lg hover:bg-amber-500 focus:outline-none focus:ring-2 focus:ring-amber-400 focus:ring-offset-2 focus:ring-offset-black transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
  >
    <span id="btn-text">Join waitlist</span>
    <span id="btn-loading" class="hidden">Joining...</span>
  </button>
</form>

<div id="success-message" class="hidden mt-4 p-4 bg-green-900 border border-green-700 rounded-lg text-green-100">
  <h3 class="font-bold">Welcome aboard! ðŸŽ‰</h3>
  <p>You're now on the waitlist. We'll notify you when Aegis is ready to protect your construction site.</p>
</div>

<div id="error-message" class="hidden mt-4 p-4 bg-red-900 border border-red-700 rounded-lg text-red-100">
  <h3 class="font-bold">Something went wrong</h3>
  <p id="error-text">Please try again or contact us at contact.aegisbuild@gmail.com</p>
</div>

<script>
import { addToWaitlist, checkEmailExists } from '../lib/supabase.ts'

const form = document.getElementById('waitlist-form') as HTMLFormElement
const emailInput = document.getElementById('email') as HTMLInputElement
const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement
const btnText = document.getElementById('btn-text') as HTMLSpanElement
const btnLoading = document.getElementById('btn-loading') as HTMLSpanElement
const successMessage = document.getElementById('success-message') as HTMLDivElement
const errorMessage = document.getElementById('error-message') as HTMLDivElement
const errorText = document.getElementById('error-text') as HTMLParagraphElement
const emailError = document.getElementById('email-error') as HTMLDivElement

// Email validation regex
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/

function showError(message: string) {
  errorText.textContent = message
  errorMessage.classList.remove('hidden')
  successMessage.classList.add('hidden')
}

function showSuccess() {
  successMessage.classList.remove('hidden')
  errorMessage.classList.add('hidden')
  form.reset()
}

function setLoading(loading: boolean) {
  if (loading) {
    btnText.classList.add('hidden')
    btnLoading.classList.remove('hidden')
    submitBtn.disabled = true
  } else {
    btnText.classList.remove('hidden')
    btnLoading.classList.add('hidden')
    submitBtn.disabled = false
  }
}

function validateEmail(email: string): boolean {
  if (!email) {
    emailError.textContent = 'Email is required'
    emailError.classList.remove('hidden')
    return false
  }
  
  if (!emailRegex.test(email)) {
    emailError.textContent = 'Please enter a valid email address'
    emailError.classList.remove('hidden')
    return false
  }
  
  emailError.classList.add('hidden')
  return true
}

// Clear error when user starts typing
emailInput.addEventListener('input', () => {
  emailError.classList.add('hidden')
  errorMessage.classList.add('hidden')
})

form.addEventListener('submit', async (e) => {
  e.preventDefault()
  
  const email = emailInput.value.trim()
  
  if (!validateEmail(email)) {
    return
  }
  
  setLoading(true)
  
  try {
    // Check if email already exists
    const emailExists = await checkEmailExists(email)
    
    if (emailExists) {
      showError('This email is already on the waitlist!')
      return
    }
    
    // Add to waitlist
    await addToWaitlist(email)
    showSuccess()
  } catch (error) {
    console.error('Error adding to waitlist:', error)
    showError('Something went wrong. Please try again.')
  } finally {
    setLoading(false)
  }
})
</script>